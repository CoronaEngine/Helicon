#include"HardcodeShaders.h"
std::unordered_map<std::string, std::variant<EmbeddedShader::ShaderCodeModule::ShaderResources,std::variant<std::vector<uint32_t>,std::string>>> EmbeddedShader::HardcodeShaders::hardcodeShadersVertexShader = {{"Reflection_C__Users_47226_Documents_Github_Helicon_Examples_main_cpp", ShaderCodeModule::ShaderResources{0,"",{{"global_ubo_struct_std140",{0,0,0,"global_ubo_struct_std140","uniform",7,284,0,static_cast<EmbeddedShader::ShaderCodeModule::ShaderResources::BindType>(3)}},{"entryPointParam_main.var_6.fragColor",{0,0,3,"entryPointParam_main.var_6.fragColor","float",3,12,0,static_cast<EmbeddedShader::ShaderCodeModule::ShaderResources::BindType>(2)}},{"input.var_0.inPosition",{0,0,0,"input.var_0.inPosition","float",3,12,0,static_cast<EmbeddedShader::ShaderCodeModule::ShaderResources::BindType>(1)}},{"entryPointParam_main.var_6.fragTexCoord",{0,0,2,"entryPointParam_main.var_6.fragTexCoord","float",2,8,0,static_cast<EmbeddedShader::ShaderCodeModule::ShaderResources::BindType>(2)}},{"entryPointParam_main.var_6.fragPos",{0,0,0,"entryPointParam_main.var_6.fragPos","float",3,12,0,static_cast<EmbeddedShader::ShaderCodeModule::ShaderResources::BindType>(2)}},{"entryPointParam_main.var_6.fragNormal",{0,0,1,"entryPointParam_main.var_6.fragNormal","float",3,12,0,static_cast<EmbeddedShader::ShaderCodeModule::ShaderResources::BindType>(2)}},}}},{"SpirV_C__Users_47226_Documents_Github_Helicon_Examples_main_cpp", std::vector<uint32_t>{119734787,66816,2621440,169,0,131089,1,196622,0,1,786447,0,2,1852399981,0,55,153,158,161,165,168,15,196611,11,1,524293,15,1970302569,1635135092,774922098,1867542121,1769236851,28271,786437,49,1952533855,1400400242,1634889588,1717527911,1952542572,1597274164,1298952003,1919904353,828666995,12340,327686,49,0,1635017060,0,786437,52,1952533855,1400400242,1634889588,1717527911,1952542572,1597208627,1298952003,1919904353,828666995,12340,327686,52,0,1635017060,0,589829,48,1651469415,1969187937,1935634274,1668641396,1953718132,808726884,0,458758,48,0,1651469415,1985965153,811561569,0,458758,48,1,1651469415,1985965153,828338785,0,458758,48,2,1651469415,1985965153,845116001,0,458758,48,3,1651469415,1985965153,861893217,0,458758,48,4,1651469415,1985965153,878670433,0,458758,48,5,1651469415,1985965153,895447649,0,458758,48,6,1651469415,1985965153,912224865,0,327685,55,1651469415,1969187937,28514,720901,158,1920233061,1768902777,1632662638,1601003890,1852399981,1918989870,1714304607,1348952434,29551,786437,161,1920233061,1768902777,1632662638,1601003890,1852399981,1918989870,1714304607,1315398002,1634562671,108,786437,165,1920233061,1768902777,1632662638,1601003890,1852399981,1918989870,1714304607,1416061298,1866692709,6582895,786437,168,1920233061,1768902777,1632662638,1601003890,1852399981,1918989870,1714304607,1130848626,1919904879,0,262149,2,1852399981,0,262215,15,30,0,262215,50,6,16,327752,49,0,35,0,262215,53,6,16,327752,52,0,35,0,196679,48,2,327752,48,0,35,0,327752,48,1,35,64,327752,48,2,35,112,327752,48,3,35,176,327752,48,4,35,240,327752,48,5,35,256,327752,48,6,35,272,262215,55,33,0,262215,55,34,0,262215,153,11,0,262215,158,30,0,262215,161,30,1,262215,165,30,2,262215,168,30,3,131091,1,196641,3,1,196630,6,32,262167,7,6,4,262167,9,6,3,262167,10,6,2,262176,14,1,9,262165,26,32,1,262187,26,27,0,262187,26,34,2,262187,26,38,3,262187,6,44,0,393260,9,43,44,44,44,327724,10,45,44,44,262187,26,51,4,262172,50,7,51,196638,49,50,262172,53,9,38,196638,52,53,589854,48,49,52,49,49,9,9,9,262176,54,2,48,262176,56,2,49,262168,84,7,4,262187,6,145,1065353216,262176,152,3,7,262176,157,3,9,262176,164,3,10,262203,14,15,1,262203,54,55,2,262203,152,153,3,262203,157,158,3,262203,157,161,3,262203,164,165,3,262203,157,168,3,327734,1,2,0,3,131320,4,262205,9,13,15,327746,56,57,55,38,262205,49,58,57,327761,50,59,58,0,327761,7,60,59,0,327761,6,61,60,0,327761,6,62,60,1,327761,6,63,60,2,327761,6,64,60,3,327761,7,65,59,1,327761,6,66,65,0,327761,6,67,65,1,327761,6,68,65,2,327761,6,69,65,3,327761,7,70,59,2,327761,6,71,70,0,327761,6,72,70,1,327761,6,73,70,2,327761,6,74,70,3,327761,7,75,59,3,327761,6,76,75,0,327761,6,77,75,1,327761,6,78,75,2,327761,6,79,75,3,458832,7,80,61,66,71,76,458832,7,81,62,67,72,77,458832,7,82,63,68,73,78,458832,7,83,64,69,74,79,458832,84,85,80,81,82,83,327746,56,86,55,34,262205,49,87,86,327761,50,88,87,0,327761,7,89,88,0,327761,6,90,89,0,327761,6,91,89,1,327761,6,92,89,2,327761,6,93,89,3,327761,7,94,88,1,327761,6,95,94,0,327761,6,96,94,1,327761,6,97,94,2,327761,6,98,94,3,327761,7,99,88,2,327761,6,100,99,0,327761,6,101,99,1,327761,6,102,99,2,327761,6,103,99,3,327761,7,104,88,3,327761,6,105,104,0,327761,6,106,104,1,327761,6,107,104,2,327761,6,108,104,3,458832,7,109,90,95,100,105,458832,7,110,91,96,101,106,458832,7,111,92,97,102,107,458832,7,112,93,98,103,108,458832,84,113,109,110,111,112,327826,84,114,113,85,327746,56,115,55,27,262205,49,116,115,327761,50,117,116,0,327761,7,118,117,0,327761,6,119,118,0,327761,6,120,118,1,327761,6,121,118,2,327761,6,122,118,3,327761,7,123,117,1,327761,6,124,123,0,327761,6,125,123,1,327761,6,126,123,2,327761,6,127,123,3,327761,7,128,117,2,327761,6,129,128,0,327761,6,130,128,1,327761,6,131,128,2,327761,6,132,128,3,327761,7,133,117,3,327761,6,134,133,0,327761,6,135,133,1,327761,6,136,133,2,327761,6,137,133,3,458832,7,138,119,124,129,134,458832,7,139,120,125,130,135,458832,7,140,121,126,131,136,458832,7,141,122,127,132,137,458832,84,142,138,139,140,141,327826,84,143,142,114,327760,7,144,13,145,327824,7,146,144,143,196670,153,146,196670,158,43,196670,161,43,196670,165,45,196670,168,43,65789,65592,}},{"HLSL_C__Users_47226_Documents_Github_Helicon_Examples_main_cpp", R"()"},{"Slang_C__Users_47226_Documents_Github_Helicon_Examples_main_cpp", R"(struct aggregate_type_0 {
	Sampler2D<float4> texture;
}
struct aggregate_type_1 {
	float3 inPosition;
	float3 inNormal;
	float2 inTexCoord;
	float3 inColor;
}
struct aggregate_type_2 {
	float3 fragPos;
	float3 fragNormal;
	float2 fragTexCoord;
	float3 fragColor;
}
struct global_ubo_struct {
	float4x4 global_var_0;
	float3x3 global_var_1;
	float4x4 global_var_2;
	float4x4 global_var_3;
	float3 global_var_4;
	float3 global_var_5;
	float3 global_var_6;
	aggregate_type_0 global_var_7;
}
ConstantBuffer<global_ubo_struct> global_ubo;
struct vertex_input {
	aggregate_type_1 var_0 : LOCATION0;
}
struct vertex_output {
	float4 position_output : SV_POSITION;
	aggregate_type_2 var_6 : LOCATION0;
}
[shader("vertex")]
vertex_output main(vertex_input input) {
	vertex_output output;
	aggregate_type_2 var_1 = {};
	output.position_output = mul(mul(mul(global_ubo.global_var_3,global_ubo.global_var_2),global_ubo.global_var_0),float4(input.var_0.inPosition,1.000000));
	float3 var_2 = mul(global_ubo.global_var_0,float4(input.var_0.inPosition,1.000000)).xyz;
	float3 var_3 = normalize(mul(global_ubo.global_var_1,input.var_0.inNormal));
	float3 var_4 = input.var_0.inColor;
	float2 var_5 = input.var_0.inTexCoord;
	output.var_6 = var_1;
	return output;
}
)"},
};